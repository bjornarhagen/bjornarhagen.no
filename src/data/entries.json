{
  "2021": {
    "links": {
      "title": "UX tip for external links",
      "slug": "links",
      "imageHeader": "/images/entries/2021/links.jpg",
      "imageText": "Photo by <a href=\"https://unsplash.com/@christopher__burns\">Christopher Burns</a>",
      "poster": "/images/entries/2021/links.jpg",
      "date": "2021-04-28T20:08:47.577Z",
      "summary": "Clicking links going to an external site can be annoying if you aren't prepared for that. To improve the user experience you should show some kind of indicator for external links.",
      "content": [
        {
          "layout": "",
          "bg": "",
          "attributes": {
            "text-align": [
              ""
            ],
            "v-align": [
              ""
            ],
            "h-align": [
              "center"
            ],
            "widths": [
              "screen-md"
            ]
          },
          "text": [
            "Clicking on a link going to an external site can be annoying if you aren't prepared for that. To improve the user experience you should show some kind of indicator for external links.\n\nOn this website I have made such an indicator. The following link is an example:\n<a href=\"//example.com\" target=\"_blank\" rel=\"noopener\">Example link</a>.\n\nIf you are on desktop, when you hover the link it will show you an indicator. On mobile it should always show, although somewhat subtle to avoid beeing distracting.\n\nThe following code is how I implemented this indicator.\n\n**HTML:**\n\n```html\n<a href=\"//example.com\" target=\"_blank\" rel=\"noopener\">Example link</a>\n```\n\n**CSS:**\n\n```css\na[target='_blank'] {\n  position: relative;\n}\n\na::after {\n  content: '\\\\2197';\n  position: absolute;\n  top: -0.5em;\n  right: -0.5em;\n  opacity: 0.5;\n}\n\n/* Desktop */\n@media (min-width: 60em) {\n  a::after {\n    opacity: 0;\n  }\n\n  a:focus::after,\n  a:hover::after {\n    opacity: 1;\n  }\n}\n```\n\nOne drawback of my implementation is that it relies on `target=\"_blank\"`. Which you may not always want to add. So an alternative way to set this up would be to use some JavaScript that finds all external links and adds a CSS class to the elements.\n\nIf you are willing to put down the effort, an even better example can be seen on web.mit.edu/contact. If you hover over the \"Alumni Association\" link, it will show you the domain of the external site in a tooltip. Unfortunately they have no indicator for mobile users.\n\nThat's it! Really short and sweet tip on how to improve the UX of your external links.\n"
          ]
        }
      ]
    },
    "pre-line-numbers": {
      "title": "How to add line numbers to pre tags",
      "slug": "pre-line-numbers",
      "imageHeader": "/images/entries/2021/pre-line-numbers.jpg",
      "imageText": "Photo by <a href=\"https://unsplash.com/@adigold1\">Adi Goldstein</a>",
      "poster": "/images/entries/2021/pre-line-numbers.jpg",
      "date": "2021-05-06T14:25:01.751Z",
      "summary": "Reading code is easier when you have line numbers, but how can you show line numbers in a <pre> tag? This can easily be solved with a few lines of JS and CSS, no need for a big external library.",
      "content": [
        {
          "layout": "",
          "bg": "",
          "attributes": {
            "text-align": [
              ""
            ],
            "v-align": [
              ""
            ],
            "h-align": [
              "center"
            ],
            "widths": [
              "screen-md"
            ]
          },
          "text": [
            "Reading code is easier when you have line numbers, but how can you show line numbers in a `<pre>` tag?\nThis can easily be solved with a few lines of JS and CSS, no need for a big external library.\n\n**JS:**\n\n```js\nfunction addLineNumbersToPres() {\n  const pres = document.querySelectorAll('pre')\n  pres.forEach((pre) => {\n    const lineNumberWrapper = document.createElement('span')\n    lineNumberWrapper.classList.add('pre-line-numbers')\n\n    const preLines = pre.textContent.split('\\\\n').length\n    for (let i = 0; i < preLines - 1; i++) {\n      const span = document.createElement('span')\n      span.appendChild(document.createTextNode(i))\n      lineNumberWrapper.appendChild(span)\n    }\n\n    pre.insertBefore(lineNumberWrapper, pre.firstChild)\n  })\n}\n```\n\nThis changes the HTML for the `<pre>` tag to look something like this:\n\n```html\n<pre>\n  <span class=\"pre-line-numbers\">\n    <span>0</span>\n    <span>1</span>\n    <span>2</span>\n    <span>3</span>\n    <span>4</span>\n    <span>5</span>\n  </span>\n  <code>\n    // Code comes here\n  </code>\n<pre>\n```\n\nNow for the styling.\n\n**CSS:**\n\n```css\npre {\n  position: relative;\n  width: 100%;\n  overflow: auto;\n  display: grid;\n  grid-template-columns: min-content max-content;\n}\n\npre .pre-line-numbers {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  text-align: right;\n  user-select: none;\n}\n```\n\n**Extra:**\nAccording to caniuse.com user-select without prefixes is only supported by 50-70% of browsers at the time of writing, so here's the prefixed properties if you want to add them:\n\n```css\npre .pre-line-numbers {\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n}\n```\n\n## What about syntax highlighting?\n\nSyntax highlighting is much more complicated to solve, but maybe I'll make a post about it one day. For now my `<pre>` tags remain monocolored."
          ]
        }
      ],
      "type": "entries"
    },
    "are-cookies-really-the-most-important-thing-for-your-business": {
      "title": "Are cookies really the most important thing for your business?",
      "slug": "are-cookies-really-the-most-important-thing-for-your-business",
      "imageHeader": "/images/entries/2021/cookies/header.jpg",
      "imageText": "Photo by <a href=\"https://unsplash.com/@lianhao\">Lianhao Qu</a>",
      "poster": "/images/entries/2021/cookies/header.jpg",
      "date": "2021-07-08T22:04:54.150Z",
      "summary": "The number one priority for so many businesses these days seem to be to get your oh so precious consent in order track you with cookies, and don't you dare do anything on their website before you've given it!",
      "content": [
        {
          "layout": "",
          "bg": "",
          "attributes": {
            "text-align": [
              ""
            ],
            "v-align": [
              ""
            ],
            "h-align": [
              "center"
            ],
            "widths": [
              "screen-md"
            ]
          },
          "text": [
            "## Priorities\n\nThe number one priority for so many businesses these days seem to be to get your _oh_ _so_ _precious_ consent in order track you with cookies, and don't you dare do **anything** on their website before you've given it!\n\nI'm actually somewhat flabbergasted at what many websites have become, it seems businesses need to sit down and think about what the point of their website is.\n\n**Let's look at an example:**"
          ]
        },
        {
          "layout": "cols-2",
          "bg": "",
          "attributes": {
            "text-align": [
              "",
              ""
            ],
            "v-align": [
              "center",
              ""
            ],
            "h-align": [
              "center",
              ""
            ],
            "widths": [
              "",
              ""
            ]
          },
          "text": [
            "Welcome to Telenor! We use cookies to track you! It's very important for us that you allow us to track you, please.\n\nOk great, no thanks Telenor. I'll just head over to Altibox instead",
            "![Telenor mandatory cookie consent screen](/images/entries/2021/cookies/telenor.png)"
          ]
        },
        {
          "layout": "cols-2",
          "bg": "",
          "attributes": {
            "text-align": [
              "",
              ""
            ],
            "v-align": [
              "",
              "center"
            ],
            "h-align": [
              "center",
              ""
            ],
            "widths": [
              "",
              ""
            ]
          },
          "text": [
            "![Altibox mandatory cookie consent screen](/images/entries/2021/cookies/altibox.png)",
            "Ah ... maybe not after all."
          ]
        },
        {
          "layout": "",
          "bg": "",
          "attributes": {
            "text-align": [
              "center"
            ],
            "v-align": [
              ""
            ],
            "h-align": [
              "center"
            ],
            "widths": [
              "screen-md"
            ]
          },
          "text": [
            "Let's look at how it can (and should) be done, shall we?\n"
          ]
        },
        {
          "layout": "full",
          "bg": "",
          "attributes": {
            "borders": [
              0
            ],
            "text-align": [
              ""
            ],
            "v-align": [
              ""
            ],
            "h-align": [
              "center"
            ],
            "widths": [
              ""
            ]
          },
          "text": [
            "![Aftenposten.no website](/images/entries/2021/cookies/aftenposten.png)"
          ]
        },
        {
          "layout": "",
          "bg": "",
          "attributes": {
            "text-align": [
              ""
            ],
            "v-align": [
              ""
            ],
            "h-align": [
              "center"
            ],
            "widths": [
              "screen-md"
            ]
          },
          "text": [
            "The cookie consent pop-up on Aftenposten.no is out of the way, allowing you to actually consume the news, which given that Aftenposten is a news site, I'd argue that giving people the news is their number one priority."
          ]
        }
      ],
      "type": "entries"
    }
  },
  "2022": {
    "good-money": {
      "title": "Good money.",
      "slug": "good-money",
      "imageHeader": "/images/entries/2022/good-money.jpg",
      "imageText": "",
      "poster": "/images/entries/2022/good-money.jpg",
      "date": "2022-03-15T01:33:00.150Z",
      "summary": "I don't believe we shall ever have a good money again before we take the thing out of the hands of government - F. A. Hayek",
      "content": [
        {
          "layout": "",
          "bg": "",
          "attributes": {
            "text-align": [
              ""
            ],
            "v-align": [
              ""
            ],
            "h-align": [
              "center"
            ],
            "widths": [
              "screen-md"
            ]
          },
          "text": [
            "## The system is broken.\n\nI believe our system for money is broken.\n\nHow can it be that I can exchange my time and energy for some amount of money today. Then 20 years in the future this money is worth but a fraction of it's original value. I don't think that is a good system, it's certainly not a system I would want to save my money in.\n\nBut, don't take my word for it\n\n> I don't believe we shall ever have a good money again before we take the thing out of the hands of government, that is, we can't take them violently out of the hands of government, all we can do is by some sly roundabout way introduce something that they can't stop.\n\n![F. A. Hayek](/images/entries/2022/good-money.jpg)\n\nF. A. Hayek\n\nWinner of the 1974 Nobel Prize in Economic Sciences\n\n## The solution?\n\nYou might have heard of Bitcoin, but what is it, and who controls it?\n\nBitcoin is:\n* an unstoppable decentralized technology that can store value.\n* controlled by the laws of mathematics.\n* protected by the laws of physics.\n\nOne could say that it's a system for money that can be forced upon the governments of the world in a \"sly roundabout way\".\n\nFirst it will _only_ be used by nerds in the fringes of the internet,\\\nthen it will _only_ be used by small groups of people,\\\nthen it will _only_ be used by small businesses,\\\nthen it will _only_ be used by small countries.\n\n### Is it a better system?\n\nLet's go back to the original problem I outlined. If I exchange my time and energy today for some amount of Bitcoin. Can I be sure that 20 years in the future, it will have kept it's value?\n\nYes.\n\nThe reason why is due to the fact that in order to make X amount of Bitcoin, you need to spend energy, however the amount of energy necessary to produce that X amount of Bitcoin is forever increasing.\n\n---\n\nTo summarize, 1₿ = 1₿.\n\nRead more: [Bitcoin whitepaper](/bitcoin.pdf).\n"
          ]
        }
      ]
    }
  },
  "2023": {
    "how-to-run-next-js-13-in-docker": {
      "title": "How to run Next.js 13 in Docker",
      "slug": "how-to-run-next-js-13-in-docker",
      "imageHeader": "/images/entries/2023/nextjs/header.jpg",
      "imageText": " ",
      "poster": "/images/entries/2023/nextjs/header.jpg",
      "date": "2023-07-17T11:15:00.000Z",
      "summary": "Next.js 13 is a game-changer for web development. In this post, I'll show you how to set it up in Docker.",
      "content": [
        {
          "layout": "",
          "bg": "",
          "attributes": {
            "text-align": [
              ""
            ],
            "v-align": [
              ""
            ],
            "h-align": [
              "center"
            ],
            "widths": [
              "screen-md"
            ]
          },
          "text": [
            "I recently had to setup a Next.js 13 project with Docker, and I had some trouble finding a good solution. After a bit of work I have a good working solution and thought I'd share it.\n\nThe Dockerfiles are based on [an example](https://github.com/vercel/next.js/blob/canary/examples/with-docker/Dockerfile) I found from the Next.js team. It didn't work out of-the-box for me, due to some issues with standalone mode and the new app dir feature as well as some incorrect permissions, so I had to make some changes.\n\nThe container images should run fine on both Docker and Podman.\n\n## Development container\n\n<mark class=\"subtle\">**Update 2024-02-10**: I've learnt quite a bit about Docker since I wrote this post and have made a dedicated post on [how to best use Docker for local development](/entries/2024/02/10/you-are-using-docker-wrong)</mark>\n\nFirst of I want to run the project locally inside of Docker, that way I don't have to deal with installing all the different dependencies on my machine.\n\nDockerfile.local:\n\n```Dockerfile\nFROM node:18-alpine AS base\n\nFROM base AS deps\n# https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine\nRUN apk add --no-cache libc6-compat\nWORKDIR /app\n\nCOPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./\nRUN \\\n  if [ -f yarn.lock ]; then yarn; \\\n  elif [ -f package-lock.json ]; then npm install; \\\n  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i; \\\n  else echo \"Lockfile not found.\" && exit 1; \\\n  fi\n\nFROM base AS dev\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nENV NODE_ENV development\nENV NEXT_TELEMETRY_DISABLED 1\nENV PORT 3000\nEXPOSE 3000\nCMD [\"bash\"]\n```\n\nOne thing I like to do with local development images is to mount the source code as a volume inside the container, so that changes to the source code are reflected live in the running container. To acheive this I use a script that builds and runs the Dockerfile.local.\n\nrun.sh:\n\n```shell\n#!/bin/bash\n\nIMAGE_NAME=\"your-image-name-here\"\nTAG_NAME=\"latest\"\nCONTAINER_INSTANCE_NAME=\"instance-name-here\"\nCOMMAND_TO_RUN_ON_CONTAINER=\"yarn dev\"\n\ncommand_exists() {\n    type \"$1\" &>/dev/null\n}\n\nif command_exists podman; then\n    CONTAINER_TOOL=podman\nelif command_exists docker; then\n    CONTAINER_TOOL=docker\nelse\n    echo \"Could not find podman or docker. Please install one of them and try again.\"\n    exit 1\nfi\n\necho \"Using $CONTAINER_TOOL: $(command -v $CONTAINER_TOOL)\"\n$CONTAINER_TOOL build --pull --rm -f \"Dockerfile.local\" -t $IMAGE_NAME:$TAG_NAME \".\"\n$CONTAINER_TOOL run --rm -it -v $(pwd):/app -p 3000:3000 --name instance-name-here $IMAGE_NAME:$TAG_NAME $COMMAND_TO_RUN_ON_CONTAINER\n```\n\nThis script builds and runs the Dockerfile.local.\nIt uses Podman if available, otherwise falls back to Docker.\n`./` is mounted as a volume on `/app` inside the container, so that changes to the source code are reflected live in the container.\n\nRunning this your application should be available on [http://localhost:3000/](http://localhost:3000/).\n\nYou can use the instance name to connect to the container, like so:\n\n```shell\ndocker exec -it instance-name-here /bin/sh\n```\n\nWhen connected you can run commands with npm/yarn/pnpm, this is great when you want to install new dependencies.\n\n## Production container\n\nWith the local development environment out of the way, let's setup a production ready image.\n\nFirst I want to use [standalone mode](https://nextjs.org/docs/pages/api-reference/next-config-js/output#automatically-copying-traced-files).\nThis allows us to run the built app without having to copy all of node_modules into the image, greatly reducing the size of the image.\n\nnext.config.js:\n\n```javascript\nconst nextConfig = {\n  output: 'standalone',\n}\n\nmodule.exports = nextConfig\n```\n\nDockerfile:\n\n```Dockerfile\nFROM node:18-alpine AS base\n\n# Install dependencies only when needed\nFROM base AS deps\n# https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine\nRUN apk add --no-cache libc6-compat\nWORKDIR /app\n\n# Install dependencies based on the preferred package manager\nCOPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./\nRUN \\\n  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \\\n  elif [ -f package-lock.json ]; then npm ci; \\\n  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i --frozen-lockfile; \\\n  else echo \"Lockfile not found.\" && exit 1; \\\n  fi\n\n# Rebuild the source code only when needed\nFROM base AS builder\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY . .\nENV NEXT_TELEMETRY_DISABLED 1\nRUN yarn lint\nRUN yarn build\n\n# Production image, copy all the files and run node\nFROM base AS runner\nWORKDIR /app\nENV NODE_ENV production\nENV NEXT_TELEMETRY_DISABLED 1\nRUN chown node:node .\nCOPY --from=builder /app/public ./public\nCOPY --from=builder --chown=node:node /app/.next/standalone ./\nCOPY --from=builder --chown=node:node /app/.next/static ./.next/static\nUSER node\nEXPOSE 3000\nENV PORT 3000\nCMD [\"node\", \"server.js\"]\n```\n\nThe only thing I don't like about this is that the .env is made part of the image. I think that's somewhat of a security risk.\nI prefer to inject the .env at runtime, but Next.js needs it at build time, so I haven't found a good solution for this yet.\n"
          ]
        }
      ],
      "type": "entries"
    },
    "laravel-csp-and-browersync": {
      "title": "Laravel CSP and BrowserSync",
      "slug": "laravel-csp-and-browersync",
      "imageHeader": "/images/entries/2023/laravel/header.jpg",
      "imageText": " ",
      "poster": "/images/entries/2023/laravel/header.jpg",
      "date": "2023-08-05T11:15:00.000Z",
      "summary": "In this post, I'll show you how to set up Content Security Policy (CSP) and BrowserSync in a Laravel project.",
      "content": [
        {
          "layout": "",
          "bg": "",
          "attributes": {
            "text-align": [
              ""
            ],
            "v-align": [
              ""
            ],
            "h-align": [
              "center"
            ],
            "widths": [
              "screen-md"
            ]
          },
          "text": [
            "If you have CSP enabled in your web app you might have ran into the issue with injected scripts, like Browser Sync, getting blocked.\nTo fix this, we can find the sha384 hash of the script, and add it to our CSP header. This way we can keep our CSP header strict, and still have the injected scripts we want working.\n\nIn this post I will show you how to do this with Laravel CSP and Browser Sync, but the same principle applies to any other web app and injected script.\n\n1. Install and setup <a href=\"https://github.com/spatie/laravel-csp\" target=\"_blank\">\"Laravel CSP\" from Spatie</a>.\n2. Find the Browser Sync injected script.\n\n```html\n<script id=\"__bs_script__\">\n  //<![CDATA[\n  ;(function () {\n    try {\n      var script = document.createElement('script')\n      if ('async') {\n        script.async = true\n      }\n      script.src = '/browser-sync/browser-sync-client.js?v=2.29.3'.replace('HOST', location.hostname)\n      if (document.body) {\n        document.body.appendChild(script)\n      } else if (document.head) {\n        document.head.appendChild(script)\n      }\n    } catch (e) {\n      console.error('Browsersync: could not append script tag', e)\n    }\n  })()\n  //]]>\n</script>\n```\n\n3. Copy **everything inside** the script tag (even the `//<![CDATA[` stuff) and paste it into a file, for example `data.txt`.\n   Make sure to save it exactly as copied, don't apply any formatting.\n4. Now run the following command `cat data.txt | openssl dgst -sha384 -binary | openssl base64 -A`. I got this output `VJ54nlS+flZSG9OXg+tLU2fi0X9vUtpMr9KR3NuzNCwdV8HmZuVokdkiY4rFdohU`. Note that you might get a `%` at the end of the output. That's not part of the hash, it's just a indicator of no empty line ending, just remove it.\n5. Add this hash to `src/app/Policies/GlobalCSPPolicy.php`, with `sha384-` prepended to it, like so:\n\n```php\nnamespace App\\Policies;\n\nuse Spatie\\Csp\\Directive;\nuse Spatie\\Csp\\Keyword;\nuse Spatie\\Csp\\Policies\\Policy;\n\nclass GlobalCSPPolicy extends Policy {\n  public function configure()\n  {\n    $this\n      ->addDirective(Directive::BASE, Keyword::SELF)\n      ->addDirective(Directive::SCRIPT, 'sha384-VJ54nlS+flZSG9OXg+tLU2fi0X9vUtpMr9KR3NuzNCwdV8HmZuVokdkiY4rFdohU') // Browser Sync 2.29.3\n      ->addNonceForDirective(Directive::SCRIPT)\n      ->addNonceForDirective(Directive::STYLE);\n  }\n}\n```\n\nThat directive alone should give us a CSP header like this: `content-security-policy: script-src 'sha384-VJ54nlS+flZSG9OXg+tLU2fi0X9vUtpMr9KR3NuzNCwdV8HmZuVokdkiY4rFdohU';`\n\nThe complete example from above should look like this: `content-security-policy: base-uri 'self';script-src 'self' 'sha384-VJ54nlS+flZSG9OXg+tLU2fi0X9vUtpMr9KR3NuzNCwdV8HmZuVokdkiY4rFdohU' 'nonce-7CADofPhUXjXBMENRcHg3kVZEiLa0L4V';style-src 'self' 'nonce-7CADofPhUXjXBMENRcHg3kVZEiLa0L4V';`\n\nWith a CSP header like this, we can run injected scripts like Browser Sync, without compromising on security.\n\nMore info can be found here\n\n- https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity\n- https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src\n"
          ]
        }
      ],
      "type": "entries"
    },
    "tolgee-self-hosted-l10n-platform": {
      "title": "Tolgee - Self hosted l10n platform",
      "slug": "tolgee-self-hosted-l10n-platform",
      "imageHeader": "/images/entries/2023/tolgee/header.jpg",
      "imageText": "tolgee",
      "poster": "/images/entries/2023/tolgee/header.jpg",
      "date": "2023-09-27T11:15:00.000Z",
      "summary": "Tolgee is an open source localization platform with cheap cloud plans and a self hosted option. It has great features, SDKs for all the popular JS front-ends, and a nice UI. In this post I'll show you how I set it up in k8s.",
      "content": [
        {
          "layout": "",
          "bg": "",
          "attributes": {
            "text-align": [
              ""
            ],
            "v-align": [
              ""
            ],
            "h-align": [
              "center"
            ],
            "widths": [
              "screen-md"
            ]
          },
          "text": [
            "Tolgee has good documentation on how to run in Docker: https://tolgee.io/platform/self_hosting/running_with_docker, but unfortunately nothing on k8s, hence this post.\n\n## Preqrequisites\n\nYou have a running PostgreSQL database available.\n\nYou need to have the following Postgre extentions enabled:\n\n* pg_trgm\n* unaccent\n\nnb: you have to be superuser to do this\n\n## Kubernetes setup\n\n**File structure:**\n\n```shell\n> tree -a\n.\n├── .env\n├── install.sh\n└── tolgee-k8s-manifest.yaml\n```\n\n**File contents:**\n\ntolgee-k8s-manifest.yaml:\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: tolgee-deployment\n  namespace: REPLACE_WITH_NAMESPACE\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: tolgee\n  template:\n    metadata:\n      labels:\n        app: tolgee\n    spec:\n      containers:\n        - name: tolgee\n          image: tolgee/tolgee\n          resources:\n            requests:\n              cpu: '100m'\n              memory: '512Mi'\n            limits:\n              memory: '2Gi'\n          envFrom:\n            - secretRef:\n                name: tolgee-secret\n          ports:\n            - name: http\n              containerPort: 8080\n          volumeMounts:\n            - mountPath: /data\n              name: tolgee-data\n          startupProbe:\n            initialDelaySeconds: 60\n            httpGet:\n              path: /\n              port: http\n          readinessProbe:\n            httpGet:\n              path: /login\n              port: http\n          livenessProbe:\n            httpGet:\n              path: /login\n              port: http\n      volumes:\n        - name: tolgee-data\n          emptyDir: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: tolgee-service\n  namespace: REPLACE_WITH_NAMESPACE\nspec:\n  selector:\n    app: tolgee\n  ports:\n    - protocol: TCP\n      port: 8080\n      targetPort: 8080\n      name: http\n  type: ClusterIP\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/backend-protocol: HTTP\n    nginx.ingress.kubernetes.io/ssl-redirect: 'true'\n    # Uncomment the following line to turn on a whitelist with your IP\n    # nginx.ingress.kubernetes.io/whitelist-source-range: 10.0.0.0/8,172.16.0.0/12,192.168.0.0/16,REPLACE_WITH_IP/28\n  name: tolgee-ingress\n  namespace: REPLACE_WITH_NAMESPACE\nspec:\n  tls:\n    - hosts:\n        - tolgee.example.com\n      secretName: tolgee-tls\n  rules:\n    - host: tolgee.example.com\n      http:\n        paths:\n          - backend:\n              service:\n                name: tolgee-service\n                port:\n                  name: http\n            path: /\n            pathType: Prefix\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: tolgee-certificate\n  namespace: REPLACE_WITH_NAMESPACE\nspec:\n  dnsNames:\n    - tolgee.example.com\n  secretName: tolgee-tls\n  issuerRef:\n    name: letsencrypt-production\n    kind: ClusterIssuer\n```\n\n.env:\n\n```env\nSERVER_PORT=8080\nSPRING_DATASOURCE_URL=REPLACE_ME\nSPRING_DATASOURCE_USERNAME=REPLACE_ME\nSPRING_DATASOURCE_PASSWORD=REPLACE_ME\nTOLGEE_FILE_STORAGE_URL=\nTOLGEE_FRONT_END_URL=\nTOLGEE_MAX_SCREENSHOTS_PER_KEY=20\nTOLGEE_MAX_TRANSLATION_TEXT_LENGTH=10000\nTOLGEE_MAX_UPLOAD_FILE_SIZE=51200\nTOLGEE_AUTHENTICATION_CREATE_INITIAL_USER=true\nTOLGEE_AUTHENTICATION_ENABLED=true\nTOLGEE_AUTHENTICATION_INITIAL_PASSWORD=REPLACE_ME\nTOLGEE_AUTHENTICATION_INITIAL_USERNAME=REPLACE_ME\nTOLGEE_AUTHENTICATION_JWT_EXPIRATION=604800000\nTOLGEE_AUTHENTICATION_JWT_SECRET=REPLACE_WITH_TOKEN\nTOLGEE_AUTHENTICATION_JWT_SUPER_EXPIRATION=3600000\nTOLGEE_AUTHENTICATION_NATIVE_ENABLED=true\nTOLGEE_AUTHENTICATION_NEEDS_EMAIL_VERIFICATION=false\nTOLGEE_AUTHENTICATION_REGISTRATIONS_ALLOWED=true\nTOLGEE_AUTHENTICATION_USER_CAN_CREATE_ORGANIZATIONS=true\nTOLGEE_BATCH_CONCURRENCY=1\nTOLGEE_CACHE_CAFFEINE_MAX_SIZE=-1\nTOLGEE_CACHE_DEFAULT_TTL=7200000\nTOLGEE_CACHE_ENABLED=false\nTOLGEE_CACHE_USE_REDIS=false\nTOLGEE_FILE_STORAGE_S3_ACCESS_KEY=\nTOLGEE_FILE_STORAGE_S3_BUCKET_NAME=\nTOLGEE_FILE_STORAGE_S3_ENABLED=false\nTOLGEE_FILE_STORAGE_S3_ENDPOINT=\nTOLGEE_FILE_STORAGE_S3_SECRET_KEY=\nTOLGEE_FILE_STORAGE_S3_SIGNING_REGION=\nTOLGEE_MACHINE_TRANSLATION_FREE_CREDITS_AMOUNT=-1\nTOLGEE_MACHINE_TRANSLATION_AWS_ACCESS_KEY=\nTOLGEE_MACHINE_TRANSLATION_AWS_DEFAULT_ENABLED=false\nTOLGEE_MACHINE_TRANSLATION_AWS_DEFAULT_PRIMARY=false\nTOLGEE_MACHINE_TRANSLATION_AWS_ENABLED=\nTOLGEE_MACHINE_TRANSLATION_AWS_REGION=eu-central-1\nTOLGEE_MACHINE_TRANSLATION_AWS_SECRET_KEY=\nTOLGEE_MACHINE_TRANSLATION_AZURE_AUTH_KEY=\nTOLGEE_MACHINE_TRANSLATION_AZURE_DEFAULT_ENABLED=false\nTOLGEE_MACHINE_TRANSLATION_AZURE_DEFAULT_PRIMARY=false\nTOLGEE_MACHINE_TRANSLATION_AZURE_REGION=\nTOLGEE_MACHINE_TRANSLATION_BAIDU_ACTION=false\nTOLGEE_MACHINE_TRANSLATION_BAIDU_APP_ID=\nTOLGEE_MACHINE_TRANSLATION_BAIDU_APP_SECRET=\nTOLGEE_MACHINE_TRANSLATION_BAIDU_DEFAULT_ENABLED=false\nTOLGEE_MACHINE_TRANSLATION_BAIDU_DEFAULT_PRIMARY=false\nTOLGEE_MACHINE_TRANSLATION_DEEPL_AUTH_KEY=\nTOLGEE_MACHINE_TRANSLATION_DEEPL_DEFAULT_ENABLED=false\nTOLGEE_MACHINE_TRANSLATION_DEEPL_DEFAULT_PRIMARY=false\nTOLGEE_MACHINE_TRANSLATION_DEEPL_FORMALITY=default\nTOLGEE_MACHINE_TRANSLATION_GOOGLE_API_KEY=\nTOLGEE_MACHINE_TRANSLATION_GOOGLE_DEFAULT_ENABLED=false\nTOLGEE_MACHINE_TRANSLATION_GOOGLE_DEFAULT_PRIMARY=false\nTOLGEE_POSTGRES_AUTOSTART_CONTAINER_NAME=tolgee_postgres\nTOLGEE_POSTGRES_AUTOSTART_DATABASE_NAME=tolgee_db\nTOLGEE_POSTGRES_AUTOSTART_ENABLED=false\nTOLGEE_POSTGRES_AUTOSTART_MODE=DOCKER\nTOLGEE_POSTGRES_AUTOSTART_PASSWORD=password\nTOLGEE_POSTGRES_AUTOSTART_PORT=25432\nTOLGEE_POSTGRES_AUTOSTART_USER=tolgee_user\nTOLGEE_RATE_LIMITS_ENABLED=true\nTOLGEE_SENTRY_CLIENT_DSN=\nTOLGEE_SENTRY_SERVER_DSN=\nTOLGEE_SENTRY_TRACES_SAMPLE_RATE=\nTOLGEE_SMTP_AUTH=false\nTOLGEE_SMTP_FROM=\nTOLGEE_SMTP_HOST=\nTOLGEE_SMTP_PASSWORD=\nTOLGEE_SMTP_PORT=25\nTOLGEE_SMTP_SSL_ENABLED=false\nTOLGEE_SMTP_TLS_ENABLED=false\nTOLGEE_SMTP_TLS_REQUIRED=false\nTOLGEE_SMTP_USERNAME=\nTOLGEE_TELEMETRY_ENABLED=true\nTOLGEE_WEBSOCKET_USE_REDIS=false\n```\n\ninstall.sh:\n\n```shell\n#!/bin/bash\n\nkubectl -n REPLACE_WITH_NAMESPACE create secret generic tolgee-secret --from-env-file=.env --save-config --dry-run=client -o yaml | kubectl -n REPLACE_WITH_NAMESPACE apply -f -\nkubectl -n REPLACE_WITH_NAMESPACE apply -f tolgee-k8s-manifest.yaml\n```\n\nNow all you need to do is update the `.env` with your own values, and run `./install.sh`.\n"
          ]
        }
      ],
      "type": "entries"
    }
  },
  "2024": {
    "automatic-versioning-with-simple-bash-script": {
      "title": "Auto versioning your app with a simple bash script",
      "slug": "automatic-versioning-with-simple-bash-script",
      "imageHeader": "/images/entries/2024/auto-version/header.jpg",
      "imageText": "",
      "poster": "/images/entries/2024/auto-version/header.jpg",
      "date": "2024-01-05T13:03:00.000Z",
      "summary": "To automatically version your app can be pretty complicated and a lot of solutions require complex dependencies and configurations. In this post I will show you how to do it with just a simple Bash script and Git.",
      "content": [
        {
          "layout": "",
          "bg": "",
          "attributes": {
            "text-align": [
              ""
            ],
            "v-align": [
              ""
            ],
            "h-align": [
              "center"
            ],
            "widths": [
              "screen-md"
            ]
          },
          "text": [
            "To automatically version your app can be pretty complicated and a lot of solutions require complex dependencies and configurations. In this post I will show you how to do it with just a simple Bash script and Git.\n\n## Preqrequisites\n\nBash, Git\n\n## The script\n\n```shell\n#!/bin/bash\n\necho \"🚀 Starting auto-version script\"\n\n# Get the latest tag from git and use it to get the version number\nVERSION=$(git describe --abbrev=0 --tags)\nVERSION_NUMBER=$(echo $VERSION | sed 's/v//g')\nOLD_VERSION_NUMBER=$(echo $VERSION | sed 's/v//g')\n\n# Get the number of commits since the last tag\nCOMMITS_SINCE_TAG=$(git rev-list --count $VERSION..HEAD)\n\nMAJOR=$(echo $VERSION_NUMBER | cut -d'.' -f1)\nMINOR=$(echo $VERSION_NUMBER | cut -d'.' -f2)\nPATCH=$(echo $VERSION_NUMBER | cut -d'.' -f3)\n\nINCREASE_MAJOR=false\nINCREASE_MINOR=false\nINCREASE_PATCH=false\n\n# Loop through the commits and check the prefix of each commit message\nfor COMMIT in $(git log --pretty=format:\"%H\" $VERSION..HEAD); do\n  MESSAGE=$(git log --pretty=format:\"%s\" -n 1 $COMMIT)\n  echo \"🔍 Checking commit message: \\\"$MESSAGE\\\"\"\n  case $MESSAGE in\n  breaking:*)\n    INCREASE_MAJOR=true\n    INCREASE_MINOR=true\n    INCREASE_PATCH=true\n    echo \"   💥 Breaking change detected 💥\"\n    ;;\n  feat:*)\n    INCREASE_MINOR=true\n    INCREASE_PATCH=true\n    echo \"   ✨ Minor change detected ✨\"\n    ;;\n  refactor:* | fix:* | build:* | ci:* | docs:* | perf:* | style:* | test:* | chore:*)\n    INCREASE_PATCH=true\n    echo \"   🛠️ Patch change detected 🛠️\"\n    ;;\n  *)\n    echo \"   🤷 No change detected, make sure to follow the commit message format! 🤷\"\n    ;;\n  esac\ndone\n\nif [ \"$INCREASE_MAJOR\" = true ]; then\n  MAJOR=$((MAJOR + 1))\n  MINOR=0\n  PATCH=0\nelif [ \"$INCREASE_MINOR\" = true ]; then\n  MINOR=$((MINOR + 1))\n  PATCH=0\nelif [ \"$INCREASE_PATCH\" = true ]; then\n  PATCH=$((PATCH + 1))\nfi\n\nVERSION_NUMBER=\"$((MAJOR)).$((MINOR)).$((PATCH))\"\necho \"Old version: $OLD_VERSION_NUMBER\"\necho \"New version: $VERSION_NUMBER\"\n\necho \"optional-prefix-v$VERSION_NUMBER\" >public/version.txt\n```"
          ]
        }
      ]
    },
    "you-are-using-docker-wrong": {
      "title": "You are using Docker wrong",
      "slug": "you-are-using-docker-wrong",
      "imageHeader": "/images/entries/2024/docker-wrong/you-are-using-docker-wrong.jpg",
      "imageText": "",
      "poster": "/images/entries/2024/docker-wrong/you-are-using-docker-wrong.jpg",
      "date": "2024-02-10T23:55:00.000Z",
      "summary": "I see many developers using Docker wrong. They still run everything locally, and only use Docker in the CI/CD pipeline. While this has it's benefits, there's still a lot of potential being missed.",
      "content": [
        {
          "layout": "",
          "bg": "",
          "attributes": {
            "text-align": [
              ""
            ],
            "v-align": [
              ""
            ],
            "h-align": [
              "center"
            ],
            "widths": [
              "screen-md"
            ]
          },
          "text": [
            "It goes without saying that the title is a bit of a hyperbole, but I do see a lot of developers using Docker in a bit of a strange way. There's a Dockerfile/Docker compose file present, but the developers never use it. They run everything 100% locally on the machine, the Dockerfile is just used in the CI/CD pipeline. I think this misses a large point of Docker, let's get into it.\n\n## Preqrequisites\n\nDocker or Podman.\n\n## Why use Docker?\n\nAn infamous phrase in software development you've probably heard before:\n\n> \"It works on my machine.\"\n\n ---\n\nWhile it's often used as a joke, this issue is probably more often a real one, stealing unnecessary time and causing headaches. Docker was supposed to solve this problem by making it work on your machine, then shipping your machine to the server/other developers, figuratively of course (<a href=\"https://twitter.com/dhh/status/1755600973492564067\" target=\"_blank\">or maybe literally?</a>). However, if you don't use Docker locally, you're not shipping your guaranteed-to-work machine, you're still doing things the _\"old way\"_, but with extra complexity mixed in.\n\n## How to _properly_ use Docker\n\nThere are many ways to do this, but here's my preferred way:\n\n1. Create a folder in your project called `docker`.\n2. In this folder, create a `Dockerfile.local` and a `docker-compose.local.yml`.\n3. In the `Dockerfile.local`, include the main dependencies like Node:20 or Python:3.8.\n4. In the `docker-compose.yml`, include the services you need, like a database, a backend, and a frontend. Then crucially, include a `volumes` section to mount your code into the container.\n5. Now, when you want to run your app, you just run `docker-compose -f docker-compose.local.yml up -d` in the `docker` folder, and you should have a running container.\n6. You can now connect to the container, and install your dependencies, run your tests, and start your app.\n\nWith this setup you no longer need to use tools like `nvm`, `pyenv`, `jenv`, etc. No more need to _pollute_ your machine with 5 versions of Node, 3 versions of Python, and 2 versions of Java. The only dependency you need is Docker. This has several benefits; you can easily switch between projects without having to worry about different versions of dependencies, you can easily onboard new developers, and you can easily run your app in CI/CD for more than just production builds.\n\n## Example setup\n\n/docker/Dockerfile.local:\n\n```Dockerfile\nFROM node:20-alpine\nWORKDIR /app\nEXPOSE 3000\nCMD [\"sh\"]\n```\n\nNotice how we don't copy over any files, we'll mount the code as a volume instead.\n\n/docker/docker-compose.local.yml:\n\n```yaml\nversion: '3.1'\n\nservices:\n  name-of-your-service:\n    build:\n      context: .\n      dockerfile: Dockerfile.local\n    ports:\n      - '3000:3000'\n    volumes:\n      - ../:/app # Mount the code into the container\n    tty: true\n```\n\nWith this `volume` setup, your whole project becomes available inside the container. Any change you do on your local machine is immediately reflected in the container.\n\n**Bonus:** If you're using VSCode, you can add a `.vscode/launch.json` file to easily launch your application without typing commands in the terminal. Only tested on Linux and MacOS, you might need to get Git Bash for Windows.\n\n```json\n{\n  \"configurations\": [\n    {\n      \"name\": \"Docker - start container\",\n      \"command\": \"docker compose -f ${workspaceFolder}/docker/docker-compose.local.yml up -d\",\n      \"request\": \"launch\",\n      \"type\": \"node-terminal\"\n    },\n    {\n      \"name\": \"Docker - Connect to container\",\n      \"command\": \"docker exec -it $(docker ps | grep 'name-of-your-service' | awk '{print $1}') sh -c 'if [ -x /bin/bash ]; then exec /bin/bash; else exec /bin/sh; fi'\",\n      \"request\": \"launch\",\n      \"type\": \"node-terminal\"\n    }\n  ]\n}\n```\n\n## End notes\n\nDocker is a very powerful tool, and hopefully this article has shown you how to use it more effectively for your local development environment. If you have any questions or feedback, feel free to reach out to me on [X](https://x.com/bjornarhagen)."
          ]
        }
      ]
    }
  }
}